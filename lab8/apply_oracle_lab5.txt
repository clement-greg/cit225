SQL> 
SQL> -- Set the page size.
SQL> SET ECHO ON
SQL> SET PAGESIZE 999
SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> --  Step #1 : Query joins between two tables :
SQL> -- ----------------------------------------------------------------------
SQL> SELECT  'Step #1' AS "Step" FROM dual;

Step                                                                            
-------                                                                         
Step #1                                                                         

1 row selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1a. MEMBER and CONTACT table USING MEMBER_ID.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   member_id, contact_id
SQL> FROM     member m INNER JOIN contact c USING(member_id);

        Contact                                                                 
       --------                                                                 
Member  Contact                                                                 
  ID #     ID #                                                                 
------ --------                                                                 
  1001     1001                                                                 
  1001     1002                                                                 
  1002     1003                                                                 
  1002     1004                                                                 
  1003     1005                                                                 
  1003     1006                                                                 
  1003     1007                                                                 
  1004     1008                                                                 
  1005     1009                                                                 
  1006     1010                                                                 
  1007     1011                                                                 
  1008     1012                                                                 

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1b. MEMBER and CONTACT with WHERE member_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   m.member_id, c.contact_id
SQL> FROM     member m,
SQL> 	      contact c
SQL> where    m.member_id = c.member_id;

        Contact                                                                 
       --------                                                                 
Member  Contact                                                                 
  ID #     ID #                                                                 
------ --------                                                                 
  1001     1001                                                                 
  1001     1002                                                                 
  1002     1003                                                                 
  1002     1004                                                                 
  1003     1005                                                                 
  1003     1006                                                                 
  1003     1007                                                                 
  1004     1008                                                                 
  1005     1009                                                                 
  1006     1010                                                                 
  1007     1011                                                                 
  1008     1012                                                                 

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1c. CONTACT and ADDRESS table USING contact_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   contact_id, address_id
SQL> FROM     contact c INNER JOIN address a USING(contact_id);

 Contact                                                                        
--------                                                                        
 Contact                                                                        
    ID # ADDRESS_ID                                                             
-------- ----------                                                             
    1001       1001                                                             
    1002       1002                                                             
    1003       1003                                                             
    1004       1004                                                             
    1005       1005                                                             
    1006       1006                                                             
    1007       1007                                                             
    1008       1008                                                             
    1009       1009                                                             
    1010       1010                                                             
    1011       1011                                                             
    1012       1012                                                             

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1d. CONTACT and ADDRESS table WHERE contact_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   c.contact_id, a.address_id
SQL> FROM     contact c,
SQL> 	      address a
SQL> where    c.contact_id = a.contact_id;

 Contact                                                                        
--------                                                                        
 Contact                                                                        
    ID # ADDRESS_ID                                                             
-------- ----------                                                             
    1001       1001                                                             
    1002       1002                                                             
    1003       1003                                                             
    1004       1004                                                             
    1005       1005                                                             
    1006       1006                                                             
    1007       1007                                                             
    1008       1008                                                             
    1009       1009                                                             
    1010       1010                                                             
    1011       1011                                                             
    1012       1012                                                             

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1e. ADDRESS and STREET_ADDRESS table USING address_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   address_id, street_address_id
SQL> FROM     address a INNER JOIN street_address sa USING(address_id);

ADDRESS_ID STREET_ADDRESS_ID                                                    
---------- -----------------                                                    
      1001              1001                                                    
      1002              1002                                                    
      1003              1003                                                    
      1004              1004                                                    
      1005              1005                                                    
      1006              1006                                                    
      1007              1007                                                    
      1008              1008                                                    
      1009              1009                                                    
      1010              1010                                                    
      1011              1011                                                    
      1012              1012                                                    

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1f. ADDRESS and STREET_ADDRESS table WHERE address_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   a.address_id, sa.street_address_id
SQL> FROM     address a,
SQL> 	      street_address sa
SQL> where    a.address_id = sa.address_id;

ADDRESS_ID STREET_ADDRESS_ID                                                    
---------- -----------------                                                    
      1001              1001                                                    
      1002              1002                                                    
      1003              1003                                                    
      1004              1004                                                    
      1005              1005                                                    
      1006              1006                                                    
      1007              1007                                                    
      1008              1008                                                    
      1009              1009                                                    
      1010              1010                                                    
      1011              1011                                                    
      1012              1012                                                    

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1g. CONTACT and TELEPHONE table USING contact_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   address_id, telephone_id
SQL> FROM     address a INNER JOIN telephone t USING(address_id);

ADDRESS_ID TELEPHONE_ID                                                         
---------- ------------                                                         
      1001         1001                                                         
      1002         1002                                                         
      1003         1003                                                         
      1004         1004                                                         
      1005         1005                                                         
      1006         1006                                                         
      1007         1007                                                         
      1008         1008                                                         
      1009         1009                                                         
      1010         1010                                                         
      1011         1011                                                         
      1012         1012                                                         

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 1h. CONTACT and TELEPHONE table WHERE contact_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   a.address_id, t.telephone_id
SQL> FROM     address a,
SQL> 	      telephone t
SQL> where    a.address_id = t.address_id;

ADDRESS_ID TELEPHONE_ID                                                         
---------- ------------                                                         
      1001         1001                                                         
      1002         1002                                                         
      1003         1003                                                         
      1004         1004                                                         
      1005         1005                                                         
      1006         1006                                                         
      1007         1007                                                         
      1008         1008                                                         
      1009         1009                                                         
      1010         1010                                                         
      1011         1011                                                         
      1012         1012                                                         

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> --  Step #2 : Query joins between two tables with the ON subclause:
SQL> -- ----------------------------------------------------------------------
SQL> SELECT  'Step #2' AS "Step" FROM dual;

Step                                                                            
-------                                                                         
Step #2                                                                         

1 row selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 2a. CONTACT and SYSTEM_USER table on CONTACT.CREATED_BY
SQL> -- 	    and SYSTEM_USER_ID.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   contact_id, system_user_id
SQL> FROM     contact c INNER JOIN system_user su
SQL> ON       c.created_by = su.system_user_id;

 Contact                                                                        
-------- System                                                                 
 Contact   User                                                                 
    ID #   ID #                                                                 
-------- ------                                                                 
    1001      1                                                                 
    1002      1                                                                 
    1003      1                                                                 
    1004      1                                                                 
    1005      1                                                                 
    1006      1                                                                 
    1007      1                                                                 
    1008   1001                                                                 
    1009   1001                                                                 
    1010   1001                                                                 
    1011   1001                                                                 
    1012   1001                                                                 

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 2b. CONTACT and SYSTEM_USER table WHERE created_by
SQL> -- 	    and system_user_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   contact_id, su.system_user_id
SQL> FROM     contact c,
SQL> 	      system_user su
SQL> where    c.created_by = su.system_user_id;

 Contact                                                                        
-------- System                                                                 
 Contact   User                                                                 
    ID #   ID #                                                                 
-------- ------                                                                 
    1001      1                                                                 
    1002      1                                                                 
    1003      1                                                                 
    1004      1                                                                 
    1005      1                                                                 
    1006      1                                                                 
    1007      1                                                                 
    1008   1001                                                                 
    1009   1001                                                                 
    1010   1001                                                                 
    1011   1001                                                                 
    1012   1001                                                                 

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 2c. CONTACT and SYSTEM_USER table on LAST_UPDATED_BY
SQL> -- 	    and SYSTEM_USER_ID.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   contact_id, system_user_id
SQL> FROM     contact c INNER JOIN system_user su
SQL> ON       c.last_updated_by = su.system_user_id;

 Contact                                                                        
-------- System                                                                 
 Contact   User                                                                 
    ID #   ID #                                                                 
-------- ------                                                                 
    1001      1                                                                 
    1002      1                                                                 
    1003      1                                                                 
    1004      1                                                                 
    1005      1                                                                 
    1006      1                                                                 
    1007      1                                                                 
    1008   1001                                                                 
    1009   1001                                                                 
    1010   1001                                                                 
    1011   1001                                                                 
    1012   1001                                                                 

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 2d. CONTACT and SYSTEM_USER table WHERE created_by
SQL> -- 	    and system_user_id.
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   contact_id, su.system_user_id
SQL> FROM     contact c,
SQL> 	      system_user su
SQL> where    c.last_updated_by = su.system_user_id;

 Contact                                                                        
-------- System                                                                 
 Contact   User                                                                 
    ID #   ID #                                                                 
-------- ------                                                                 
    1001      1                                                                 
    1002      1                                                                 
    1003      1                                                                 
    1004      1                                                                 
    1005      1                                                                 
    1006      1                                                                 
    1007      1                                                                 
    1008   1001                                                                 
    1009   1001                                                                 
    1010   1001                                                                 
    1011   1001                                                                 
    1012   1001                                                                 

12 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> --  Step #3 : Query joins between two tables with the ON subclause:
SQL> -- ----------------------------------------------------------------------
SQL> SELECT  'Step #3' AS "Step" FROM dual;

Step                                                                            
-------                                                                         
Step #3                                                                         

1 row selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 3a. SYSTEM_USER and SYSTEM_USER on SYSTEM_USER_ID, and
SQL> --     CREATED_BY columns.
SQL> -- ----------------------------------------------------------------------
SQL> COL system_user_id  FORMAT 999999	HEADING "System|User|ID #|--------|Table #1"
SQL> COL created_by	 FORMAT 999999	HEADING "Created|By|ID #|--------|Table #1"
SQL> COL system_user_pk  FORMAT 999999	HEADING "System|User|ID #|--------|Table #2"
SQL> 
SQL> SELECT   su1.system_user_id, su1.created_by, su2.system_user_id system_user_pk
SQL> FROM     system_user su1 INNER JOIN system_user su2
SQL> ON       su1.created_by = su2.system_user_id;

  System  Created   System                                                      
    User       By     User                                                      
    ID #     ID #     ID #                                                      
-------- -------- --------                                                      
Table #1 Table #1 Table #2                                                      
-------- -------- --------                                                      
       1        1        1                                                      
    1001        1        1                                                      
    1002        1        1                                                      

3 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 3b. SYSTEM_USER and SYSTEM_USER on SYSTEM_USER_ID, and
SQL> --     LAST_UPDATED_BY columns.
SQL> -- ----------------------------------------------------------------------
SQL> COL system_user_id   FORMAT 999999  HEADING "System|User|ID #|--------|Table #1"
SQL> COL last_updated_by  FORMAT 999999  HEADING "Last|Updated|By|ID #|--------|Table #1"
SQL> COL system_user_pk   FORMAT 999999  HEADING "System|User|ID #|--------|Table #2"
SQL> 
SQL> SELECT   su1.system_user_id, su1.last_updated_by, su2.system_user_id system_user_pk
SQL> FROM     system_user su1 INNER JOIN system_user su2
SQL> ON       su1.last_updated_by = su2.system_user_id;

             Last                                                               
  System  Updated   System                                                      
    User       By     User                                                      
    ID #     ID #     ID #                                                      
-------- -------- --------                                                      
Table #1 Table #1 Table #2                                                      
-------- -------- --------                                                      
       1        1        1                                                      
    1001        1        1                                                      
    1002        1        1                                                      

3 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> -- 3c. ORIGINAL, CREATED BY, and UPDATED BY with
SQL> --     Username and User_ID columns.
SQL> -- ----------------------------------------------------------------------
SQL> COL user_id	FORMAT 999999  HEADING "System|User|ID #|--------|Table #1"
SQL> COL user_name	FORMAT A8      HEADING "System|User|Name|--------|Table #1"
SQL> COL cby_user_id	FORMAT 999999  HEADING "System|User|ID #|--------|Table #2"
SQL> COL cby_user_name	FORMAT A8      HEADING "System|User|Name|--------|Table #2"
SQL> COL lby_user_id	FORMAT 999999  HEADING "System|User|ID #|--------|Table #3"
SQL> COL lby_user_name	FORMAT A8      HEADING "System|User|Name|--------|Table #3"
SQL> SELECT
SQL> 	       su1.system_user_id user_id
SQL> 	     , su1.system_user_name user_name
SQL> 	     , su2.system_user_id user_id
SQL> 	     , su2.system_user_name cby_user_name
SQL> 	     , su3.system_user_id lby_user_id
SQL> 	     , su3.system_user_name lby_user_name
SQL> FROM system_user su1 INNER JOIN system_user su2
SQL> ON su1.created_by = su2.system_user_id
SQL> INNER JOIN system_user su3
SQL> ON su1.last_updated_by = su3.system_user_id;

  System System     System System     System System                             
    User User         User User         User User                               
    ID # Name         ID # Name         ID # Name                               
-------- -------- -------- -------- -------- --------                           
Table #1 Table #1 Table #1 Table #2 Table #3 Table #3                           
-------- -------- -------- -------- -------- --------                           
       1 SYSADMIN        1 SYSADMIN        1 SYSADMIN                           
    1001 DBA1            1 SYSADMIN        1 SYSADMIN                           
    1002 DBA2            1 SYSADMIN        1 SYSADMIN                           

3 rows selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> --  Step #4 : Query joins between three tables with the ON subclause:
SQL> -- ----------------------------------------------------------------------
SQL> SELECT  'Step #4' AS "Step" FROM dual;

Step                                                                            
-------                                                                         
Step #4                                                                         

1 row selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> SELECT   r.rental_id, ri.rental_id, ri.item_id, i.item_id
SQL> FROM     rental r INNER JOIN rental_item ri
SQL> ON       r.rental_id = ri.rental_id INNER JOIN item i
SQL> ON       ri.item_id = i.item_id;

 Rent  Rent  Item  Item                                                         
 ID #  ID #  ID #  ID #                                                         
----- ----- ----- -----                                                         
 1001  1001  1002  1002                                                         
 1001  1001  1004  1004                                                         
 1001  1001  1005  1005                                                         
 1002  1002  1016  1016                                                         
 1002  1002  1021  1021                                                         
 1003  1003  1019  1019                                                         
 1004  1004  1014  1014                                                         
 1005  1005  1007  1007                                                         
 1005  1005  1001  1001                                                         

9 rows selected.

SQL> 
SQL> -- After creating the foregoing result set, alter the RENTAL table and drop the NN_RENTAL_3 constraint.
SQL> 
SQL> ALTER TABLE rental DROP CONSTRAINT nn_rental_3;

Table altered.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> --  Step #5 : Display the Department_name and Average Salary
SQL> --      BUILD OUT THE TABLES, SEUQNECES, ETC..... and Insert Data
SQL> --      Finally write the SQL to retuen Depoart_name and average Salary
SQL> -- ----------------------------------------------------------------------
SQL> SELECT  'Step #5' AS "Step" FROM dual;

Step                                                                            
-------                                                                         
Step #5                                                                         

1 row selected.

SQL> 
SQL> -- ----------------------------------------------------------------------
SQL> /* Conditionally drop non-equijoin sample tables. */
SQL> BEGIN
SQL>   FOR i IN (SELECT   object_name
SQL> 		 ,	  object_type
SQL> 		 FROM	  user_objects
SQL> 		 WHERE	  object_name IN ('DEPARTMENT','DEPARTMENT_S'
SQL> 				       ,'EMPLOYEE','EMPLOYEE_S'
SQL> 				       ,'SALARY','SALARY_S')
SQL> 		 ORDER BY object_type) LOOP
SQL> 	 IF i.object_type = 'TABLE' THEN
SQL> 	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name||' CASCADE CONSTRAINTS';
SQL> 	 ELSIF i.object_type = 'SEQUENCE' THEN
SQL> 	   EXECUTE IMMEDIATE 'DROP '||i.object_type||' '||i.object_name;
SQL> 	 END IF;
SQL>   END LOOP;
SQL> END;
SQL> /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* Create department table. */
SQL> CREATE TABLE department
SQL> ( department_id	NUMBER	CONSTRAINT department_pk PRIMARY KEY
SQL> , department_name	VARCHAR2(20));

Table created.

SQL> 
SQL> /* Create a department_s sequence. */
SQL> CREATE SEQUENCE department_s;

Sequence created.

SQL> 
SQL> /* Create a salary table. */
SQL> CREATE TABLE salary
SQL> ( salary_id	     NUMBER  CONSTRAINT salary_pk   PRIMARY KEY
SQL> , effective_start_date  DATE    CONSTRAINT salary_nn1  NOT NULL
SQL> , effective_end_date    DATE
SQL> , salary		     NUMBER  CONSTRAINT salary_nn2  NOT NULL);

Table created.

SQL> 
SQL> /* Create a salary_s sequence. */
SQL> CREATE SEQUENCE salary_s;

Sequence created.

SQL> 
SQL> /* Create an employee table. */
SQL> CREATE TABLE employee
SQL> ( employee_id    NUMBER	    CONSTRAINT employee_pk  PRIMARY KEY
SQL> , department_id  NUMBER	    CONSTRAINT employee_nn1 NOT NULL
SQL> , salary_id      NUMBER	    CONSTRAINT employee_nn2 NOT NULL
SQL> , first_name     VARCHAR2(20)  CONSTRAINT employee_nn3 NOT NULL
SQL> , last_name      VARCHAR2(20)  CONSTRAINT employee_nn4 NOT NULL
SQL> , CONSTRAINT employee_fk FOREIGN KEY(employee_id) REFERENCES employee(employee_id));

Table created.

SQL> 
SQL> /* Create an employee_s sequence. */
SQL> CREATE SEQUENCE employee_s;

Sequence created.

SQL> 
SQL> 
SQL> /* Create an anonymous program to insert data. */
SQL> SET SERVEROUTPUT ON SIZE UNLIMITED
SQL> DECLARE
SQL>   /* Declare a collection of strings. */
SQL>   TYPE xname IS TABLE OF VARCHAR2(20);
SQL> 
SQL>   /* Declare a collection of numbers. */
SQL>   TYPE xsalary IS TABLE OF NUMBER;
SQL> 
SQL>   /* Local variable generated by a random foreign key. */
SQL>   lv_department_id  NUMBER;
SQL>   lv_salary_id	 NUMBER;
SQL> 
SQL>   /* A collection of first names. */
SQL>   lv_first XNAME := xname('Ann','Abbey','Amanda','Archie','Antonio','Arnold'
SQL> 			      ,'Barbara','Basil','Bernie','Beth','Brian','Bryce'
SQL> 			      ,'Carl','Carrie','Charlie','Christine','Corneilus','Crystal'
SQL> 			      ,'Dana','Darlene','Darren','Dave','Davi','Deidre'
SQL> 			      ,'Eamonn','Eberhard','Ecaterina','Ebony','Elana','Eric'
SQL> 			      ,'Fabian','Faith','Fernando','Farris','Fiana','Francesca'
SQL> 			      ,'Gabe','Gayle','Geoffrey','Gertrude','Grayson','Guy'
SQL> 			      ,'Harry','Harriet','Henry','Henrica','Herman','Hesper'
SQL> 			      ,'Ian','Ida','Iggy','Iliana','Imogene','Issac'
SQL> 			      ,'Jan','Jack','Jennifer','Jerry','Julian','June'
SQL> 			      ,'Kacey','Karen','Kaitlyn','Keith','Kevin','Kyle'
SQL> 			      ,'Laney','Lawrence','Leanne','Liam','Lois','Lynne'
SQL> 			      ,'Marcel','Marcia','Mark','Meagan','Mina','Michael'
SQL> 			      ,'Nancy','Naomi','Narcissa','Nasim','Nathaniel','Neal'
SQL> 			      ,'Obadiah','Odelia','Ohanna','Olaf','Olive','Oscar'
SQL> 			      ,'Paige','Palmer','Paris','Pascal','Patricia','Peter'
SQL> 			      ,'Qadir','Qasim','Quaid','Quant','Quince','Quinn'
SQL> 			      ,'Rachelle','Rafael','Raj','Randy','Ramona','Raven'
SQL> 			      ,'Savina','Sadie','Sally','Samuel','Saul','Santino'
SQL> 			      ,'Tabitha','Tami','Tanner','Thomas','Timothy','Tina'
SQL> 			      ,'Ugo','Ululani','Umberto','Una','Urbi','Ursula'
SQL> 			      ,'Val','Valerie','Valiant','Vanessa','Vaughn','Verna'
SQL> 			      ,'Wade','Wagner','Walden','Wanda','Wendy','Wilhelmina'
SQL> 			      ,'Xander','Xavier','Xena','Xerxes','Xia','Xylon'
SQL> 			      ,'Yana','Yancy','Yasmina','Yasmine','Yepa','Yeva'
SQL> 			      ,'Zacarias','Zach','Zahara','Zander','Zane');
SQL> 
SQL>   /* A collection of last names. */
SQL>   lv_last	XNAME := xname('Abernathy','Anderson','Baker','Barney'
SQL> 			      ,'Christensen','Cafferty','Davis','Donaldson'
SQL> 			      ,'Eckhart','Eidelman','Fern','Finkel','Frank','Frankel','Fromm'
SQL> 			      ,'Garfield','Geary','Harvey','Hamilton','Harwood'
SQL> 			      ,'Ibarguen','Imbezi','Lindblom','Lynstrom'
SQL> 			      ,'Martel','McKay','McLellen','Nagata','Noonan','Nunes'
SQL> 			      ,'O''Brien','Oakey','Patterson','Petersen','Pratel','Preston'
SQL> 			      ,'Qian','Queen','Ricafort','Richards','Roberts','Robertson'
SQL> 			      ,'Sampson','Simon','Tabacchi','Travis','Trevor','Tower'
SQL> 			      ,'Ubel','Urie','Vassen','Vanderbosch'
SQL> 			      ,'Wacha','Walcott','West','Worley','Xian','Xiang'
SQL> 			      ,'Yackley','Yaguchi','Zarbarsky','Zambelli');
SQL> 
SQL>   /* A collection of department names. */
SQL>   lv_dept	XNAME := xname('Accounting','Operations','Sales','Factory','Manufacturing');
SQL> 
SQL>   /* A colleciton of possible salaries. */
SQL>   lv_salary  XSALARY := xsalary( 36000, 42000, 48000, 52000, 64000 );
SQL> 
SQL>   /* Define a local function. */
SQL>   FUNCTION random_foreign_key RETURN INTEGER IS
SQL> 	 /* Declare a return variable. */
SQL> 	 lv_return_value  NUMBER;
SQL>   BEGIN
SQL> 	 /* Select a random number between 1 and 5 and assign it to a local variable. */
SQL> 	 SELECT CASE
SQL> 		  WHEN num = 0 THEN 5 ELSE num
SQL> 		END AS random_key
SQL> 	 INTO	lv_return_value
SQL> 	 FROM	(SELECT ROUND(dbms_random.VALUE(1,1000)/100/2,0) num FROM dual) il;
SQL> 
SQL> 	 /* Return the random number. */
SQL> 	 RETURN lv_return_value;
SQL>   END random_foreign_key;
SQL> 
SQL> BEGIN
SQL>   /* Insert departments. */
SQL>   FOR i IN 1..lv_dept.LAST LOOP
SQL> 	 INSERT INTO department
SQL> 	 ( department_id
SQL> 	 , department_name )
SQL> 	 VALUES
SQL> 	 ( department_s.NEXTVAL
SQL> 	 , lv_dept(i));
SQL>   END LOOP;
SQL> 
SQL>   /* Insert salary. */
SQL>   FOR i IN 1..lv_salary.LAST LOOP
SQL> 	 INSERT INTO salary
SQL> 	 ( salary_id
SQL> 	 , effective_start_date
SQL> 	 , salary )
SQL> 	 VALUES
SQL> 	 ( salary_s.NEXTVAL
SQL> 	 , TRUNC(SYSDATE) - 30
SQL> 	 , lv_salary(i));
SQL>   END LOOP;
SQL> 
SQL>   /* Insert random employees. */
SQL>   FOR i IN 1..lv_first.LAST LOOP
SQL> 	 FOR j IN 1..lv_last.LAST LOOP
SQL> 	   /* Assign a random values to a local variable. */
SQL> 	   lv_department_id := random_foreign_key;
SQL> 	   lv_salary_id := random_foreign_key;
SQL> 
SQL> 	   /* Insert values into the employee table. */
SQL> 	   INSERT INTO employee
SQL> 	   ( employee_id
SQL> 	   , department_id
SQL> 	   , salary_id
SQL> 	   , first_name
SQL> 	   , last_name )
SQL> 	   VALUES
SQL> 	   ( employee_s.NEXTVAL
SQL> 	   , lv_department_id
SQL> 	   , lv_salary_id
SQL> 	   , lv_first(i)
SQL> 	   , lv_last(j));
SQL> 	 END LOOP;
SQL>   END LOOP;
SQL> 
SQL>   /* Commit the writes. */
SQL>   COMMIT;
SQL> END;
SQL> /

PL/SQL procedure successfully completed.

SQL> 
SQL> SELECT   d.department_name
SQL> ,	      ROUND(AVG(s.salary),0) AS salary
SQL> FROM     employee e INNER JOIN department d
SQL> ON       e.department_id = d.department_id INNER JOIN salary s
SQL> ON       e.salary_id = s.salary_id
SQL> GROUP BY d.department_name
SQL> ORDER BY d.department_name;

DEPARTMENT_NAME          SALARY                                                 
-------------------- ----------                                                 
Accounting                48413                                                 
Factory                   48348                                                 
Manufacturing             48397                                                 
Operations                48583                                                 
Sales                     48284                                                 

5 rows selected.

SQL> 
SQL> PROMPT SHOULD RETURN RESULTS THAT LOOK LIKE:
SHOULD RETURN RESULTS THAT LOOK LIKE:
SQL> PROMPT DDEPARTMENT_NAME	      SALARY
DDEPARTMENT_NAME 	 SALARY
SQL> PROMPT -------------------- ----------
> PROMPT Accounting		    48337
-------------------- --------- PROMPT Accounting		  48337
SQL> PROMPT Factory		       48138
Factory  		  48138
SQL> PROMPT Manufacturing	       48526
Manufacturing		  48526
SQL> PROMPT Operations		       48124
Operations		  48124
SQL> PROMPT Sales		       48721
Sales			  48721
SQL> 
SQL> BEGIN
SQL>   FOR i IN (SELECT table_name
SQL> 		 FROM	user_tables
SQL> 		 WHERE	table_name = 'MOCK_CALENDAR') LOOP
SQL> 	 EXECUTE IMMEDIATE 'DROP TABLE '||i.table_name||' CASCADE CONSTRAINTS';
SQL>   END LOOP;
SQL> END;
SQL> /

PL/SQL procedure successfully completed.

SQL> 
SQL> /* Create a mock_calendar table. */
SQL> CREATE TABLE mock_calendar
SQL> ( short_month  VARCHAR2(3)
SQL> , long_month   VARCHAR2(9)
SQL> , start_date   DATE
SQL> , end_date     DATE );

Table created.

SQL> 
SQL> /* Seed the table with 10 years of data. */
SQL> DECLARE
SQL>   /* Create local collection data types. */
SQL>   TYPE smonth IS TABLE OF VARCHAR2(3);
SQL>   TYPE lmonth IS TABLE OF VARCHAR2(9);
SQL> 
SQL>   /* Declare month arrays. */
SQL>   short_month SMONTH := smonth('JAN','FEB','MAR','APR','MAY','JUN'
SQL> 				   ,'JUL','AUG','SEP','OCT','NOV','DEC');
SQL>   long_month  LMONTH := lmonth('January','February','March','April','May','June'
SQL> 				   ,'July','August','September','October','November','December');
SQL> 
SQL>   /* Declare base dates. */
SQL>   start_date DATE := '01-JAN-15';
SQL>   end_date   DATE := '31-JAN-15';
SQL> 
SQL>   /* Declare years. */
SQL>   years	  NUMBER := 4;
SQL> 
SQL> BEGIN
SQL> 
SQL>   /* Loop through years and months. */
SQL>   FOR i IN 1..years LOOP
SQL> 	 FOR j IN 1..short_month.COUNT LOOP
SQL> 	   INSERT INTO mock_calendar VALUES
SQL> 	   ( short_month(j)
SQL> 	   , long_month(j)
SQL> 	   , ADD_MONTHS(start_date,(j-1)+(12*(i-1)))
SQL> 	   , ADD_MONTHS(end_date,(j-1)+(12*(i-1))));
SQL> 	 END LOOP;
SQL>   END LOOP;
SQL> 
SQL>   /* Commit the records. */
SQL>   COMMIT;
SQL> END;
SQL> /

PL/SQL procedure successfully completed.

SQL> 
SQL> SET PAGESIZE 16
SQL> 
SQL> /* Format column output. */
SQL> COL short_month FORMAT A5 HEADING "Short|Month"
SQL> COL long_month  FORMAT A9 HEADING "Long|Month"
SQL> COL start_date  FORMAT A9 HEADING "Start|Date"
SQL> COL end_date    FORMAT A9 HEADING "End|Date"
SQL> 
SQL> /* Query the results from the table. */
SQL> SELECT * FROM mock_calendar;

Short Long      Start     End                                                   
Month Month     Date      Date                                                  
----- --------- --------- ---------                                             
JAN   January   01-JAN-15 31-JAN-15                                             
FEB   February  01-FEB-15 28-FEB-15                                             
MAR   March     01-MAR-15 31-MAR-15                                             
APR   April     01-APR-15 30-APR-15                                             
MAY   May       01-MAY-15 31-MAY-15                                             
JUN   June      01-JUN-15 30-JUN-15                                             
JUL   July      01-JUL-15 31-JUL-15                                             
AUG   August    01-AUG-15 31-AUG-15                                             
SEP   September 01-SEP-15 30-SEP-15                                             
OCT   October   01-OCT-15 31-OCT-15                                             
NOV   November  01-NOV-15 30-NOV-15                                             
DEC   December  01-DEC-15 31-DEC-15                                             

Short Long      Start     End                                                   
Month Month     Date      Date                                                  
----- --------- --------- ---------                                             
JAN   January   01-JAN-16 31-JAN-16                                             
FEB   February  01-FEB-16 29-FEB-16                                             
MAR   March     01-MAR-16 31-MAR-16                                             
APR   April     01-APR-16 30-APR-16                                             
MAY   May       01-MAY-16 31-MAY-16                                             
JUN   June      01-JUN-16 30-JUN-16                                             
JUL   July      01-JUL-16 31-JUL-16                                             
AUG   August    01-AUG-16 31-AUG-16                                             
SEP   September 01-SEP-16 30-SEP-16                                             
OCT   October   01-OCT-16 31-OCT-16                                             
NOV   November  01-NOV-16 30-NOV-16                                             
DEC   December  01-DEC-16 31-DEC-16                                             

Short Long      Start     End                                                   
Month Month     Date      Date                                                  
----- --------- --------- ---------                                             
JAN   January   01-JAN-17 31-JAN-17                                             
FEB   February  01-FEB-17 28-FEB-17                                             
MAR   March     01-MAR-17 31-MAR-17                                             
APR   April     01-APR-17 30-APR-17                                             
MAY   May       01-MAY-17 31-MAY-17                                             
JUN   June      01-JUN-17 30-JUN-17                                             
JUL   July      01-JUL-17 31-JUL-17                                             
AUG   August    01-AUG-17 31-AUG-17                                             
SEP   September 01-SEP-17 30-SEP-17                                             
OCT   October   01-OCT-17 31-OCT-17                                             
NOV   November  01-NOV-17 30-NOV-17                                             
DEC   December  01-DEC-17 31-DEC-17                                             

Short Long      Start     End                                                   
Month Month     Date      Date                                                  
----- --------- --------- ---------                                             
JAN   January   01-JAN-18 31-JAN-18                                             
FEB   February  01-FEB-18 28-FEB-18                                             
MAR   March     01-MAR-18 31-MAR-18                                             
APR   April     01-APR-18 30-APR-18                                             
MAY   May       01-MAY-18 31-MAY-18                                             
JUN   June      01-JUN-18 30-JUN-18                                             
JUL   July      01-JUL-18 31-JUL-18                                             
AUG   August    01-AUG-18 31-AUG-18                                             
SEP   September 01-SEP-18 30-SEP-18                                             
OCT   October   01-OCT-18 31-OCT-18                                             
NOV   November  01-NOV-18 30-NOV-18                                             
DEC   December  01-DEC-18 31-DEC-18                                             

48 rows selected.

SQL> 
SQL> SELECT   d.department_name
SQL> ,	      ROUND(AVG(s.salary),0) AS salary
SQL> FROM     employee e INNER JOIN department d
SQL> ON       e.department_id = d.department_id INNER JOIN salary s
SQL> ON       e.salary_id = s.salary_id
SQL> GROUP BY d.department_name
SQL> ORDER BY d.department_name;

DEPARTMENT_NAME          SALARY                                                 
-------------------- ----------                                                 
Accounting                48413                                                 
Factory                   48348                                                 
Manufacturing             48397                                                 
Operations                48583                                                 
Sales                     48284                                                 

5 rows selected.

SQL> 
SQL> SELECT   d.department_name
SQL> ,	      ROUND(AVG(s.salary),0) AS salary
SQL> FROM     employee e INNER JOIN department d
SQL> ON       e.department_id = d.department_id INNER JOIN salary s
SQL> ON       e.salary_id = s.salary_id
SQL> WHERE    effective_start_date between trunc(sysdate - 60) and trunc(sysdate + 1)
SQL>   and    effective_start_date is not null
SQL> GROUP BY d.department_name
SQL> ORDER BY d.department_name;

DEPARTMENT_NAME          SALARY                                                 
-------------------- ----------                                                 
Accounting                48413                                                 
Factory                   48348                                                 
Manufacturing             48397                                                 
Operations                48583                                                 
Sales                     48284                                                 

5 rows selected.

SQL> 
SQL> SPOOL OFF
